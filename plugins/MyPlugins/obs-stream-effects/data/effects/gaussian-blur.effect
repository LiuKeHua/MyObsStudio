// OBS Default
uniform float4x4 ViewProj;

// Settings (Shared)
uniform texture2d u_image;
uniform float2 u_imageSize;
uniform float2 u_imageTexel;
uniform int u_radius;
uniform int u_diameter;
uniform float2 u_texelDelta;

// Settings (Private)
//uniform float registerkernel[25];
uniform texture2d kernel;
uniform float2 kernelTexel;

sampler_state textureSampler {
	Filter    = Point;
	AddressU  = Clamp;
	AddressV  = Clamp;
	MinLOD    = 0;
	MaxLOD    = 0;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 BlurFunc(float2 uv, float4 rgba) {
	float2 uvOffset = float2(0, 0);
	float4 final = rgba * kernel.SampleLevel(textureSampler, (float2(0, u_radius - 1) * kernelTexel), 0).r;
	for (int k = 1; k <= u_radius; k++) {
		uvOffset += u_texelDelta;
		float l_g = kernel.SampleLevel(textureSampler, (float2(k, u_radius - 1) * kernelTexel), 0).r;
		float4 l_p = u_image.SampleLevel(textureSampler, uv + uvOffset, 0);
		float4 l_n = u_image.SampleLevel(textureSampler, uv - uvOffset, 0);
		final += (l_p + l_n) * l_g;
	}
	return final;
}

float4 PSGaussian(VertDataOut v_in) : TARGET {
	float4 rgba = u_image.SampleLevel(textureSampler, v_in.uv, 0);	
	return BlurFunc(v_in.uv, rgba);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSGaussian(v_in);
	}
}
