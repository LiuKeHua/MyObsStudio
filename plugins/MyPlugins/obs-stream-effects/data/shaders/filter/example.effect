// Basic Input Parameters
uniform float4x4 ViewProj; // View Projection Matrix
uniform float2 ViewSize; // View Size as Float2
//uniform int2 ViewSizeI; // View Size as Int2
//uniform float Time; // Time Existing
uniform float TimeActive; // Time Active

// Filter Input Parameters
uniform texture2d Image; // Input Image
uniform float2 Image_Size;
//uniform int2 Image_SizeI;
//uniform float2 Image_Texel;

// Custom Parameters (These will be visible in the UI)
//uniform float4 Color;
uniform float WaveScale;
uniform float WaveAmplitude;

sampler_state textureSampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct FragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

FragData VSDefault(VertData v_in) {
	FragData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;

	return vert_out;
}

// Simple texture sample, technically does nothing.
float4 PS_Sample(FragData v_in) : TARGET {
	return Image.Sample(textureSampler, v_in.uv);
}

// Adding a little wave to the image makes a huge difference already.
float4 PS_Wave(FragData v_in) : TARGET {
	float2 realPos = v_in.uv * ViewSize;
	float yoff = sin(realPos.x / WaveAmplitude + TimeActive) * ((WaveScale / 100.0) * Image_Size.y);	
	return Image.Sample(textureSampler, v_in.uv + float2(0, yoff));
}

// Rotating is also rather easy to do.
float4 PS_Rotate(FragData v_in) : TARGET {
	float angle = TimeActive * 3.141 / 16.0;
	
	float cp = cos(angle);
	float sp = sin(angle);
	float sn = -sp;
	float2 uv = v_in.uv * Image_Size;
	uv = float2((uv.x * cp) + (uv.y * sn), (uv.x * sp) + (uv.y * cp));
	uv /= Image_Size;

	return Image.Sample(textureSampler, uv);	
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_Rotate(v_in);
	}
}
